package universitysystem;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class PrerequisiteForm extends javax.swing.JFrame {

    /**
     * Creates new form PrerequisiteForm
     */
    public PrerequisiteForm() {
        initComponents();
        
        // Populate the Table and Combo box
        displayPrereqs();
        getCourseID();
        getPrereqID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_prereqs = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_save = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        combo_course_id = new javax.swing.JComboBox<>();
        combo_prereq_id = new javax.swing.JComboBox<>();
        btn_delete = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        btn_search = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PREREQUISITE");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_search.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(txt_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 445, 34));

        table_prereqs.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        table_prereqs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "COURSE ID", "PREREQUISITES"
            }
        ));
        table_prereqs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_prereqs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_prereqsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_prereqs);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 64, 611, 403));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ADD NEW PREREQUISITES"));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("COURSE ID");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("PREREQ ID");

        btn_save.setBackground(new java.awt.Color(102, 102, 255));
        btn_save.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_save.setText("SAVE");
        btn_save.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_saveMouseClicked(evt);
            }
        });
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_edit.setBackground(new java.awt.Color(102, 102, 255));
        btn_edit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_edit.setText("EDIT");
        btn_edit.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_editMouseClicked(evt);
            }
        });
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        combo_course_id.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_course_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_course_idActionPerformed(evt);
            }
        });

        combo_prereq_id.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_prereq_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_prereq_idActionPerformed(evt);
            }
        });

        btn_delete.setBackground(new java.awt.Color(102, 102, 255));
        btn_delete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_delete.setText("DELETE");
        btn_delete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_deleteMouseClicked(evt);
            }
        });
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_refresh.setBackground(new java.awt.Color(102, 102, 255));
        btn_refresh.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_refresh.setText("REFRESH");
        btn_refresh.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combo_course_id, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(combo_prereq_id, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_refresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_save)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_delete, btn_edit, btn_refresh, btn_save});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_course_id))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_prereq_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_save)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_delete)
                        .addComponent(btn_refresh)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_delete, btn_edit, btn_refresh, btn_save});

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, -1, 200));

        btn_search.setBackground(new java.awt.Color(102, 102, 255));
        btn_search.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_search.setForeground(new java.awt.Color(255, 255, 255));
        btn_search.setText("SEARCH");
        btn_search.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_searchMouseClicked(evt);
            }
        });
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });
        getContentPane().add(btn_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, 132, 35));

        jLabel1.setBackground(new java.awt.Color(102, 102, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("F:\\mark\\UniversitySystem\\src\\universitysystem\\pexels-pixabay-235985.jpg")); // NOI18N
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 520));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_searchMouseClicked

    }//GEN-LAST:event_btn_searchMouseClicked

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        searchPrereq(txt_search.getText());
    }//GEN-LAST:event_btn_searchActionPerformed

    private void table_prereqsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_prereqsMouseClicked
        if(table_prereqs.getSelectedRow() > -1) {
            getPrereqData();
        }
    }//GEN-LAST:event_table_prereqsMouseClicked

    private void btn_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_deleteMouseClicked
        DefaultTableModel model = (DefaultTableModel) table_prereqs.getModel();
        int selectedRow = table_prereqs.getSelectedRow();

        if (selectedRow != -1) { // Check if a row is selected
            String course_id = model.getValueAt(selectedRow, 0).toString();
            String prereq_id = model.getValueAt(selectedRow, 1).toString();    
            deletePrereq(course_id, prereq_id);
            displayPrereqs();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.");
        }
    }//GEN-LAST:event_btn_deleteMouseClicked

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed

    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        displayPrereqs();
        clearTextFields(); // Clear text fields
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_saveMouseClicked
        addPrereq(combo_course_id.getSelectedItem().toString(),
            combo_prereq_id.getSelectedItem().toString());

        displayPrereqs();

        clearTextFields(); // Clear text fields
    }//GEN-LAST:event_btn_saveMouseClicked

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_editMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_editMouseClicked

    }//GEN-LAST:event_btn_editMouseClicked

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        DefaultTableModel model = (DefaultTableModel) table_prereqs.getModel();
        int selectedRow = table_prereqs.getSelectedRow();

        if (selectedRow != -1) { // Check if a row is selected
        String course_id = model.getValueAt(selectedRow, 0).toString();
        String prereq_id = combo_prereq_id.getSelectedItem().toString();
        updatePrereqData(course_id, prereq_id);
            displayPrereqs();
            clearTextFields();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to edit.");
        }
    }//GEN-LAST:event_btn_editActionPerformed

    private void combo_course_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_course_idActionPerformed

    }//GEN-LAST:event_combo_course_idActionPerformed

    private void combo_prereq_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_prereq_idActionPerformed

    }//GEN-LAST:event_combo_prereq_idActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrerequisiteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrerequisiteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrerequisiteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrerequisiteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrerequisiteForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_search;
    private javax.swing.JComboBox<String> combo_course_id;
    private javax.swing.JComboBox<String> combo_prereq_id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_prereqs;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables
    
    // Display all prerequisite data to the table
    private void displayPrereqs() {
        DatabaseConnection conn = new DatabaseConnection();
        DefaultTableModel model = (DefaultTableModel) table_prereqs.getModel();
        model.setRowCount(0);

        
        String query = "select course_id, prereq_id from prereq";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            
            while(rs.next()) {
                String course_id = rs.getString("course_id");
                String prereq_id = rs.getString("prereq_id");
             
                model.addRow(new Object[] {course_id, prereq_id});
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        } 
    }
    
    // Populate the course id combobox
    public void getCourseID() {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "SELECT DISTINCT course_id FROM course";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()) {  
                combo_course_id.addItem(rs.getString(1));
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    // Populate the prereq id combobox
    public void getPrereqID() {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "SELECT DISTINCT course_id FROM course";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()) {  
                combo_prereq_id.addItem(rs.getString(1));
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    // Search prerequisite using Search Text field and display to table
    private void searchPrereq(String prereq_id) {
        DatabaseConnection conn = new DatabaseConnection();
        DefaultTableModel model = (DefaultTableModel) table_prereqs.getModel();

        model.setRowCount(0);
        String query = "select course_id " +
                        " from prereq where prereq_id = '" + prereq_id + "'";

        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
             
            
            while(rs.next()) {
 
                String course_id = rs.getString("course_id");
                
                model.addRow(new Object[] {course_id, prereq_id});
            }
            
           
        } catch(SQLException ex) {
        }
    }
    
    // Display Prerequisite Data from Table to Text fields and Combobox.
    private void getPrereqData() {
        DefaultTableModel model = (DefaultTableModel) table_prereqs.getModel();
        
        String course_id = model.getValueAt(table_prereqs.getSelectedRow(), 0).toString();
        String prereq_id = model.getValueAt(table_prereqs.getSelectedRow(), 0).toString();              
        
        // for the course id combo box.
        for(int item = 0; item < combo_course_id.getItemCount(); item++) {
            if(combo_course_id.getItemAt(item).equals(course_id)) {
                combo_course_id.setSelectedIndex(item); // 0
            }
        }   
        // end
        
        // for the prereq id combo box.
        for(int item = 0; item < combo_prereq_id.getItemCount(); item++) {
            if(combo_prereq_id.getItemAt(item).equals(prereq_id)) {
                combo_prereq_id.setSelectedIndex(item); // 0
            }
        }   
        // end
        
    }
    
    // Delete prerequisite
    private void deletePrereq(String course_id, String prereq_id) {
        DatabaseConnection conn = new DatabaseConnection();
        String query = "DELETE FROM prereq WHERE course_id = ? AND prereq_id = ?";

        try (PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {
            pstmt.setString(1, course_id);
            pstmt.setString(2, prereq_id);
            int rowsDeleted = pstmt.executeUpdate(); // Execute the query and get the number of rows affected
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(null, "Successfully deleted the record");
            } else {
                JOptionPane.showMessageDialog(null, "No records found");
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void clearTextFields() {
        combo_prereq_id.setSelectedIndex(0);
        combo_course_id.setSelectedIndex(0);
        txt_search.setText("");   
    }
    
    // Add a new Prerequisite
    public void addPrereq(String course_id,
                          String prereq_id) {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "INSERT INTO prereq (course_id, prereq_id) VALUES (?, ?)";
        try(PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {
            pstmt.setString(1, course_id);
            pstmt.setString(2, prereq_id);
            
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Added new prerequisite successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add new prerequisite.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error adding prerequisite: " + ex.getMessage());
            ex.printStackTrace(); // Print stack trace for debugging
        }
    }
    
    // Update prerequisite data
    private void updatePrereqData(String course_id, String prereq_id) {        
        DatabaseConnection conn = new DatabaseConnection();
        String query = "UPDATE prereq SET prereq_id = ? WHERE course_id = ?";

        try (PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {
            pstmt.setString(1, prereq_id);
            pstmt.setString(2, course_id);

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Prerequisite data updated successfully.");                
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update prerequisite data.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error updating prerequisite data: " + ex.getMessage());
            ex.printStackTrace(); // Print stack trace for debugging
        }
    }
}
