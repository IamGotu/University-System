package universitysystem;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class SectionForm extends javax.swing.JFrame {

    /**
     * Creates new form SectionForm
     */
    public SectionForm() {
        initComponents();
        
        // Populate the Table and Combo box
        displaySections();
        getCourseID();
        getBuilding();
        getRoomNum();
        getTimeSlot();      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_search = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_section = new javax.swing.JTable();
        btn_delete = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txt_year = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_save = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        txt_section_id = new javax.swing.JTextField();
        txt_semester = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        combo_departments = new javax.swing.JComboBox<>();
        combo_building = new javax.swing.JComboBox<>();
        combo_time_slot_id = new javax.swing.JComboBox<>();
        combo_room_number = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SECTION");

        txt_search.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btn_search.setBackground(new java.awt.Color(102, 102, 255));
        btn_search.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_search.setForeground(new java.awt.Color(255, 255, 255));
        btn_search.setText("SEARCH");
        btn_search.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_searchMouseClicked(evt);
            }
        });
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        table_section.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        table_section.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "COURSE ID", "SECTION ID", "SEMESTER", "YEAR", "BUILDING", "ROOM NUMBER", "TIME SLOT ID"
            }
        ));
        table_section.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_section.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_sectionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_section);

        btn_delete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_delete.setText("DELETE");
        btn_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_deleteMouseClicked(evt);
            }
        });
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_refresh.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_refresh.setText("REFRESH");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ADD NEW SECTION"));

        txt_year.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("SECTION ID");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("COURSE ID");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("SEMESTER");

        btn_save.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_save.setText("SAVE");
        btn_save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_saveMouseClicked(evt);
            }
        });
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_edit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_edit.setText("EDIT");
        btn_edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_editMouseClicked(evt);
            }
        });
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        txt_section_id.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txt_semester.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("ROOM NUMBER");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("BUILDING");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("YEAR");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("TIME SLOT ID");

        combo_departments.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_departments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_departmentsActionPerformed(evt);
            }
        });

        combo_building.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_building.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_buildingActionPerformed(evt);
            }
        });

        combo_time_slot_id.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_time_slot_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_time_slot_idActionPerformed(evt);
            }
        });

        combo_room_number.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_room_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_room_numberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_save))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txt_semester, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txt_section_id, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(combo_departments, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(combo_time_slot_id, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel5)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_year, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(combo_building, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(combo_room_number, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(combo_departments, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_section_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_semester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(combo_building, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(combo_room_number, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(combo_time_slot_id, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_save)
                    .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_refresh))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_search)
                        .addGap(34, 34, 34)
                        .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_search, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(btn_search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_refresh)
                    .addComponent(btn_delete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_searchMouseClicked

    }//GEN-LAST:event_btn_searchMouseClicked

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        searchSection(txt_search.getText());
    }//GEN-LAST:event_btn_searchActionPerformed

    private void table_sectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_sectionMouseClicked
        if(table_section.getSelectedRow() > -1) {
            getSectionData();
        }
    }//GEN-LAST:event_table_sectionMouseClicked

    private void btn_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_deleteMouseClicked
        DefaultTableModel model = (DefaultTableModel) table_section.getModel();
        int selectedRow = table_section.getSelectedRow();

        if (selectedRow != -1) { // Check if a row is selected
            String course_id = model.getValueAt(selectedRow, 0).toString();
            String sec_id = model.getValueAt(selectedRow, 1).toString();
            String semester = model.getValueAt(selectedRow, 2).toString();
            int year = Integer.parseInt(model.getValueAt(selectedRow, 3).toString());
            String building = model.getValueAt(selectedRow, 4).toString();
            String room_number = model.getValueAt(selectedRow, 5).toString();
            String time_slot_id = model.getValueAt(selectedRow, 6).toString();
            deleteSections(course_id, sec_id, semester, year, building, room_number, time_slot_id);
            displaySections();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.");
        }
    }//GEN-LAST:event_btn_deleteMouseClicked

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed

    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        displaySections();
        clearTextFields(); // Clear text fields
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_saveMouseClicked
        addSection(combo_departments.getSelectedItem().toString(),
                    txt_section_id.getText(),
                    txt_semester.getText(),
                    Integer.parseInt(txt_year.getText()),
                    combo_building.getSelectedItem().toString(),
                    combo_room_number.getSelectedItem().toString(),
                    combo_time_slot_id.getSelectedItem().toString());

        displaySections();

        clearTextFields(); // Clear text fields
    }//GEN-LAST:event_btn_saveMouseClicked

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_editMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_editMouseClicked

    }//GEN-LAST:event_btn_editMouseClicked

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        DefaultTableModel model = (DefaultTableModel) table_section.getModel();
        int selectedRow = table_section.getSelectedRow();

        if (selectedRow != -1) { // Check if a row is selected
        String course_id = model.getValueAt(selectedRow, 0).toString();
        String sec_id = txt_section_id.getText();
        String semester = txt_semester.getText();
        int year = Integer.parseInt(txt_year.getText());
        String building = combo_building.getSelectedItem().toString();
        String room_number = combo_room_number.getSelectedItem().toString();
        String time_slot_id = combo_time_slot_id.getSelectedItem().toString();
        updateSectionData(course_id, sec_id, semester, year, building, room_number, time_slot_id);
            displaySections();
            clearTextFields();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to edit.");
        }
    }//GEN-LAST:event_btn_editActionPerformed

    private void combo_departmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_departmentsActionPerformed

    }//GEN-LAST:event_combo_departmentsActionPerformed

    private void combo_buildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_buildingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_buildingActionPerformed

    private void combo_time_slot_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_time_slot_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_time_slot_idActionPerformed

    private void combo_room_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_room_numberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_room_numberActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SectionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SectionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SectionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SectionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SectionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_search;
    private javax.swing.JComboBox<String> combo_building;
    private javax.swing.JComboBox<String> combo_departments;
    private javax.swing.JComboBox<String> combo_room_number;
    private javax.swing.JComboBox<String> combo_time_slot_id;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_section;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_section_id;
    private javax.swing.JTextField txt_semester;
    private javax.swing.JTextField txt_year;
    // End of variables declaration//GEN-END:variables
    
    // Display all section data to the table
    private void displaySections() {
        DatabaseConnection conn = new DatabaseConnection();
        DefaultTableModel model = (DefaultTableModel) table_section.getModel();
        model.setRowCount(0);

        
        String query = "select course_id, sec_id, semester, year, building, room_number, time_slot_id from section";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            
            while(rs.next()) {
                String course_id = rs.getString("course_id");
                String sec_id = rs.getString("sec_id");
                String semester = rs.getString("semester");
                int year = rs.getInt("year");
                String building = rs.getString("building");
                String room_number = rs.getString("room_number");
                String time_slot_id = rs.getString("time_slot_id");
                
                model.addRow(new Object[] {course_id, sec_id, semester, String.valueOf(year),
                                           building, room_number, time_slot_id});
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        } 
    }
    
    // Populate the course id combobox
    private void getCourseID() {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "SELECT DISTINCT course_id FROM course";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()) {  
                combo_departments.addItem(rs.getString(1));
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    // Populate the building combobox
    private void getBuilding() {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "SELECT DISTINCT building FROM classroom";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()) {  
                combo_building.addItem(rs.getString(1));
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    // Populate the room number combobox
    private void getRoomNum() {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "SELECT DISTINCT room_number FROM classroom";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()) {  
                combo_room_number.addItem(rs.getString(1));
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    // Populate the time slot id combobox
    private void getTimeSlot() {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "SELECT DISTINCT time_slot_id FROM time_slot";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()) {  
                combo_time_slot_id.addItem(rs.getString(1));
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    // Search section using Search Text field and display to table
    private void searchSection(String sec_id) {
        DatabaseConnection conn = new DatabaseConnection();
        DefaultTableModel model = (DefaultTableModel) table_section.getModel();

        model.setRowCount(0);
        String query = "select course_id, semester, year, building, room_number, time_slot_id " +
                        " from section where sec_id = '" + sec_id + "'";

        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
             
            
            while(rs.next()) {
 
                String course_id = rs.getString("course_id");
                String semester = rs.getString("semester");
                int year = rs.getInt("year");
                String building  = rs.getString("building");
                String room_number  = rs.getString("room_number");
                String time_slot_id  = rs.getString("time_slot_id");
                
                
                model.addRow(new Object[] {course_id, sec_id, semester, String.valueOf(year),
                                           building, room_number, time_slot_id});
            }
        } catch(SQLException ex) {
        }
    }
    
    // Display Section Data from Table to Text fields and Combobox.
    private void getSectionData() {
        DefaultTableModel model = (DefaultTableModel) table_section.getModel();
        
        String course_id = model.getValueAt(table_section.getSelectedRow(), 0).toString();
        String sec_id = model.getValueAt(table_section.getSelectedRow(), 1).toString();
        String semester = model.getValueAt(table_section.getSelectedRow(), 2).toString();
        String year = model.getValueAt(table_section.getSelectedRow(), 3).toString();
        String building = model.getValueAt(table_section.getSelectedRow(), 4).toString();
        String room_number = model.getValueAt(table_section.getSelectedRow(), 5).toString();
        String time_slot_id = model.getValueAt(table_section.getSelectedRow(), 6).toString();

        txt_section_id.setText(sec_id);
        txt_semester.setText(semester);
        txt_year.setText(year);
        
        
        
        
        // for the course id combo box.
        for(int item = 0; item < combo_departments.getItemCount(); item++) {
            if(combo_departments.getItemAt(item).equals(course_id)) {
                combo_departments.setSelectedIndex(item); // 0
            }
        }   
        // end
        
        // for the building combo box.
        for(int item = 0; item < combo_building.getItemCount(); item++) {
            if(combo_building.getItemAt(item).equals(building)) {
                combo_building.setSelectedIndex(item); // 0
            }
        }   
        // end
        
        // for the building combo box.
        for(int item = 0; item < combo_room_number.getItemCount(); item++) {
            if(combo_room_number.getItemAt(item).equals(room_number)) {
                combo_room_number.setSelectedIndex(item); // 0
            }
        }   
        // end
        
        // for the time slot id combo box.
        for(int item = 0; item < combo_time_slot_id.getItemCount(); item++) {
            if(combo_time_slot_id.getItemAt(item).equals(time_slot_id)) {
                combo_time_slot_id.setSelectedIndex(item); // 0
            }
        }   
        // end
        
    }
    
    // Delete section
    private void deleteSections(String course_id, String sec_id, String semester, int year,
                                String building, String room_number, String time_slot_id) {
        DatabaseConnection conn = new DatabaseConnection();
        String query = "DELETE FROM section WHERE course_id = ? AND sec_id = ? AND semester = ? AND year = ? AND building = ? AND room_number = ? AND time_slot_id = ?";

        try (PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {
            pstmt.setString(1, course_id);
            pstmt.setString(2, sec_id);
            pstmt.setString(3, semester);
            pstmt.setInt(4, year);
            pstmt.setString(5, building);
            pstmt.setString(6, room_number);
            pstmt.setString(7, time_slot_id);
            int rowsDeleted = pstmt.executeUpdate(); // Execute the query and get the number of rows affected
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(null, "Successfully deleted the record");
            } else {
                JOptionPane.showMessageDialog(null, "No records found");
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void clearTextFields() {
        combo_departments.setSelectedIndex(0);
        txt_section_id.setText("");
        txt_semester.setText("");
        txt_year.setText("");
        combo_building.setSelectedIndex(0);
        combo_room_number.setSelectedIndex(0);
        combo_time_slot_id.setSelectedIndex(0);
        txt_search.setText("");   
    }
    
    // Update section data
    private void updateSectionData(String course_id, String sec_id, String semester, int year,
                                   String building, String room_number, String time_slot_id) {        
        DatabaseConnection conn = new DatabaseConnection();
        String query = "UPDATE section SET sec_id = ?, semester = ?, year = ?, building = ?, room_number = ?, time_slot_id = ? WHERE course_id = ?";


        //String query = "UPDATE section SET sec_id = ?, semester = ?, year = ?, building = ?, room_number, time_slot_id WHERE course_id = ?";

        try (PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {
            
            pstmt.setString(1, sec_id);
            pstmt.setString(2, semester);
            pstmt.setInt(3, year);
            pstmt.setString(4, building);
            pstmt.setString(5, room_number);
            pstmt.setString(6, time_slot_id);
            pstmt.setString(7, course_id);

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Section data updated successfully.");                
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update section data.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error updating section data: " + ex.getMessage());
            ex.printStackTrace(); // Print stack trace for debugging
        }
    }
    
    // Add a new
    public void addSection(String course_id, String sec_id, String semester, int year,
                           String building, String room_number, String time_slot_id) {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "INSERT INTO section (course_id, sec_id, semester, year, building, room_number, time_slot_id)"
                + "     VALUES (?, ?, ?, ?, ?, ?, ?)";
        try(PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {
            pstmt.setString(1, course_id);
            pstmt.setString(2, sec_id);
            pstmt.setString(3, semester);
            pstmt.setInt(4, year);
            pstmt.setString(5, building);
            pstmt.setString(6, room_number);
            pstmt.setString(7, time_slot_id);
            
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Added new section successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add new section.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error adding section: " + ex.getMessage());
            ex.printStackTrace(); // Print stack trace for debugging
        }
    }
}
