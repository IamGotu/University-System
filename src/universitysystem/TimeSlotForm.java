package universitysystem;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class TimeSlotForm extends javax.swing.JFrame {

    /**
     * Creates new form TimeSlotForm
     */
    public TimeSlotForm() {
        initComponents();
        
        // Populate the Table
        displayTimeSlots();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_time_slots = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txt_end_min = new javax.swing.JTextField();
        txt_start_min = new javax.swing.JTextField();
        txt_end_hr = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_save = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        txt_time_slot_id = new javax.swing.JTextField();
        txt_day = new javax.swing.JTextField();
        txt_start_hr = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btn_delete = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        btn_search = new javax.swing.JButton();
        txt_search = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("TIME SLOTS");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table_time_slots.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        table_time_slots.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TIME SLOT ID", "DAY", "START HR", "START MIN", "END HR", "END MIN"
            }
        ));
        table_time_slots.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_time_slots.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_time_slotsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_time_slots);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 64, 671, 350));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ADD NEW TIME SLOT"));

        txt_end_min.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txt_start_min.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txt_end_hr.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("DAY");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("TIME SLOT ID");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("START HR");

        btn_save.setBackground(new java.awt.Color(102, 102, 255));
        btn_save.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_save.setText("SAVE");
        btn_save.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_saveMouseClicked(evt);
            }
        });
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_edit.setBackground(new java.awt.Color(102, 102, 255));
        btn_edit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_edit.setText("EDIT");
        btn_edit.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_editMouseClicked(evt);
            }
        });
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        txt_time_slot_id.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txt_day.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txt_start_hr.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("END MIN");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("END HR");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("STAR MIN");

        btn_delete.setBackground(new java.awt.Color(102, 102, 255));
        btn_delete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_delete.setText("DELETE");
        btn_delete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_deleteMouseClicked(evt);
            }
        });
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_refresh.setBackground(new java.awt.Color(102, 102, 255));
        btn_refresh.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_refresh.setText("REFRESH");
        btn_refresh.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_refresh)
                        .addGap(18, 18, 18)
                        .addComponent(btn_delete)
                        .addGap(18, 18, 18)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_save))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_end_hr, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(txt_start_min, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_start_hr, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_day, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_time_slot_id, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_end_min))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_delete, btn_edit, btn_refresh, btn_save});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_time_slot_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_start_hr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txt_start_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_end_hr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_end_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)))
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_save)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_delete)
                        .addComponent(btn_refresh)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_delete, btn_edit, btn_refresh, btn_save});

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(689, 64, -1, -1));

        btn_search.setBackground(new java.awt.Color(102, 102, 255));
        btn_search.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_search.setForeground(new java.awt.Color(255, 255, 255));
        btn_search.setText("SEARCH");
        btn_search.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_searchMouseClicked(evt);
            }
        });
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });
        getContentPane().add(btn_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(551, 12, 132, 34));

        txt_search.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(txt_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 505, 34));

        jLabel1.setBackground(new java.awt.Color(102, 102, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("E:\\universitydb\\UniversitySystem\\src\\universitysystem\\pexels-pixabay-235985.jpg")); // NOI18N
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 460));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        displayTimeSlots();
        clearTextFields(); // Clear text fields
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_deleteMouseClicked
        DefaultTableModel model = (DefaultTableModel) table_time_slots.getModel();
        int selectedRow = table_time_slots.getSelectedRow();

        if (selectedRow != -1) { // Check if a row is selected
            String time_slot_id = model.getValueAt(selectedRow, 0).toString();
            String day = model.getValueAt(selectedRow, 1).toString();
            int start_hr = Integer.parseInt(model.getValueAt(selectedRow, 2).toString());
            int start_min = Integer.parseInt(model.getValueAt(selectedRow, 3).toString());
            int end_hr = Integer.parseInt(model.getValueAt(selectedRow, 4).toString());
            int end_min = Integer.parseInt(model.getValueAt(selectedRow, 5).toString());
            deleteTimeSlots(time_slot_id, day, start_hr, start_min, end_hr, end_min);
            displayTimeSlots();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.");
        }
    }//GEN-LAST:event_btn_deleteMouseClicked

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed

    }//GEN-LAST:event_btn_deleteActionPerformed

    private void table_time_slotsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_time_slotsMouseClicked
        if(table_time_slots.getSelectedRow() > -1) {
            getTimeSlotData();
        }
    }//GEN-LAST:event_table_time_slotsMouseClicked

    private void btn_saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_saveMouseClicked
        addTimeSlot(txt_time_slot_id.getText(),
                        txt_day.getText(),
                        Integer.parseInt(txt_start_hr.getText()),
                        Integer.parseInt(txt_start_min.getText()),
                        Integer.parseInt(txt_end_hr.getText()),
                        Integer.parseInt(txt_end_min.getText()));
            
            displayTimeSlots();

            clearTextFields(); // Clear text fields
    }//GEN-LAST:event_btn_saveMouseClicked

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_editMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_editMouseClicked

    }//GEN-LAST:event_btn_editMouseClicked

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        DefaultTableModel model = (DefaultTableModel) table_time_slots.getModel();
        int selectedRow = table_time_slots.getSelectedRow();

        if (selectedRow != -1) { // Check if a row is selected
        String time_slot_id = model.getValueAt(selectedRow, 0).toString();
        String day = txt_day.getText();
        int start_hr = Integer.parseInt(txt_start_hr.getText());
        int start_min = Integer.parseInt(txt_start_min.getText());
        int end_hr = Integer.parseInt(txt_end_hr.getText());
        int end_min = Integer.parseInt(txt_end_min.getText());
        updateTimeSlotData(time_slot_id, day, start_hr, start_min, end_hr, end_min);
            displayTimeSlots();
            clearTextFields();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to edit.");
        }
    }//GEN-LAST:event_btn_editActionPerformed

    private void btn_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_searchMouseClicked

    }//GEN-LAST:event_btn_searchMouseClicked

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        searchTimeSlot(txt_search.getText());
    }//GEN-LAST:event_btn_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimeSlotForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimeSlotForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimeSlotForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeSlotForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimeSlotForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_time_slots;
    private javax.swing.JTextField txt_day;
    private javax.swing.JTextField txt_end_hr;
    private javax.swing.JTextField txt_end_min;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_start_hr;
    private javax.swing.JTextField txt_start_min;
    private javax.swing.JTextField txt_time_slot_id;
    // End of variables declaration//GEN-END:variables
    
    // Display all time slot data to the table
    private void displayTimeSlots() {
        DatabaseConnection conn = new DatabaseConnection();
        DefaultTableModel model = (DefaultTableModel) table_time_slots.getModel();
        model.setRowCount(0);

        
        String query = "select time_slot_id, day, start_hr, start_min, end_hr, end_min from time_slot";
        
        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            
            while(rs.next()) {
                String time_slot_id = rs.getString("time_slot_id");
                String day = rs.getString("day");
                int start_hr = rs.getInt("start_hr");
                int start_min = rs.getInt("start_min");
                int end_hr = rs.getInt("end_hr");
                int end_min = rs.getInt("end_min");
                
                model.addRow(new Object[] {time_slot_id, day, String.valueOf(start_hr),
                                           String.valueOf(start_min), String.valueOf(end_hr),
                                           String.valueOf(end_min)});
            }
        } catch(SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void clearTextFields() {
        txt_time_slot_id.setText("");
        txt_day.setText("");
        txt_start_hr.setText("");
        txt_start_min.setText("");
        txt_end_hr.setText("");
        txt_end_min.setText("");
        txt_search.setText("");   
    }
    
    // Delete time slot
    private void deleteTimeSlots(String time_slot_id, String day, int start_hr, int start_min, int end_hr, int end_min) {
        DatabaseConnection conn = new DatabaseConnection();
        String query = "DELETE FROM time_slot WHERE time_slot_id = ? AND day = ? AND start_hr = ? AND start_min = ? AND end_hr = ? AND end_min = ?";

        try (PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {
            pstmt.setString(1, time_slot_id);
            pstmt.setString(2, day);
            pstmt.setInt(3, start_hr);
            pstmt.setInt(4, start_min);
            pstmt.setInt(5, end_hr);
            pstmt.setInt(6, end_min);
            int rowsDeleted = pstmt.executeUpdate(); // Execute the query and get the number of rows affected
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(null, "Successfully deleted the record");
            } else {
                JOptionPane.showMessageDialog(null, "No records found");
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    // Display Time Slot Data from Table to Text fields.
    private void getTimeSlotData() {
        DefaultTableModel model = (DefaultTableModel) table_time_slots.getModel();
        
        String time_slot_id = model.getValueAt(table_time_slots.getSelectedRow(), 0).toString();
        String day = model.getValueAt(table_time_slots.getSelectedRow(), 1).toString();
        String start_hr = model.getValueAt(table_time_slots .getSelectedRow(), 2).toString();
        String start_min = model.getValueAt(table_time_slots.getSelectedRow(), 3).toString();
        String end_hr = model.getValueAt(table_time_slots.getSelectedRow(), 4).toString();
        String end_min = model.getValueAt(table_time_slots .getSelectedRow(), 5).toString();
        
        txt_time_slot_id.setText(time_slot_id);
        txt_day.setText(day);        
        txt_start_hr.setText(start_hr);
        txt_start_min.setText(start_min);
        txt_end_hr.setText(end_hr);        
        txt_end_min.setText(end_min);
    }
    
    // Add a new
    public void addTimeSlot(String time_slot_id, String day, int start_hr,
                            int start_min, int end_hr, int end_min) {
        DatabaseConnection conn = new DatabaseConnection();
        
        String query = "INSERT INTO time_slot (time_slot_id, day, start_hr, start_min, end_hr, end_min)"
                + "     VALUES (?, ?, ?, ?, ?, ?)";
        try(PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {
            pstmt.setString(1, time_slot_id);
            pstmt.setString(2, day);
            pstmt.setInt(3, start_hr);
            pstmt.setInt(4, start_min);
            pstmt.setInt(5, end_hr);
            pstmt.setInt(6, end_min);
            
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Added new time slot successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add new time slot.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error adding time slot: " + ex.getMessage());
            ex.printStackTrace(); // Print stack trace for debugging
        }
    }
    
    // Update instructor data
    private void updateTimeSlotData(String time_slot_id, String day, int start_hr,
                                    int start_min, int end_hr, int end_min) {        
        DatabaseConnection conn = new DatabaseConnection();
        String query = "UPDATE time_slot SET end_hr = ?, end_min = ? WHERE time_slot_id = ? AND day = ? AND start_hr = ? AND start_min = ?";

        try (PreparedStatement pstmt = conn.getConnection().prepareStatement(query)) {

            pstmt.setInt(1, end_hr);
            pstmt.setInt(2, end_min);
            
            pstmt.setString(3, time_slot_id);
            pstmt.setString(4, day);
            pstmt.setInt(5, start_hr);
            pstmt.setInt(6, start_min);

            

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Time slot data updated successfully.");               
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update time slot data.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error updating time slot data: " + ex.getMessage());
            ex.printStackTrace(); // Print stack trace for debugging
        }
    }
    
    // Search time slot using Search Text field and display.
    private void searchTimeSlot(String time_slot_id) {
        DatabaseConnection conn = new DatabaseConnection();
        DefaultTableModel model = (DefaultTableModel) table_time_slots.getModel();

        model.setRowCount(0);
        String query = "select day, start_hr, start_min, end_hr, end_min " +
                        " from time_slot where time_slot_id = '" + time_slot_id + "'";

        try(Statement stmt = conn.getConnection().createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
             
            
            while(rs.next()) {
              
                String day = rs.getString("day");
                int start_hr = rs.getInt("start_hr");
                int start_min = rs.getInt("start_min");
                int end_hr = rs.getInt("end_hr");
                int end_min = rs.getInt("end_min");
                
                model.addRow(new Object[] {time_slot_id, day, String.valueOf(start_hr), String.valueOf(start_min),
                                           String.valueOf(end_hr), String.valueOf(end_min)});
            }         
        } catch(SQLException ex) {
        }
    }
}
